import com.fasterxml.jackson.dataformat.yaml.snakeyaml.Yaml

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'flyway'
apply plugin: 'application'
apply plugin: 'gradle-one-jar'

// Use Java 7 by default
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-gradle-plugin:3.0'
        classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.3.2'
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

flyway {
    def yamlConfig = new Yaml().load(new File('servicio-usuario.yml').newReader())
    def dbConfig = yamlConfig.database

    user = dbConfig.user
    password = dbConfig.password
    url = dbConfig.url
}

// Set our project variables
project.ext {
    dropwizardVersion = '0.7.0'
}
// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile(
            'io.dropwizard:dropwizard-core:' + dropwizardVersion,
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion,
            'io.dropwizard:dropwizard-hibernate:' + dropwizardVersion,
            'org.slf4j:slf4j-api:1.7.5',
            'org.postgresql:postgresql:9.3-1101-jdbc41',
            'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.4.0',
            'org.flywaydb:flyway-core:3.0',
            'commons-validator:commons-validator:1.4.0',
    )
    testCompile(
            'junit:junit:4.11',
            'org.hamcrest:hamcrest-core:1.3',
            'org.mockito:mockito-all:1.9.5'
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

// The main class of the application
mainClassName = 'ec.gob.senescyt.usuario.UsuarioApplication'

// Configure the run task to start the Dropwizard service
run {
    args 'server', 'servicio-usuario.yml'
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging {
        showStandardStreams = true
        displayGranularity = 2
        exceptionFormat = 'full'
        events 'started', 'passed'
    }

    outputs.upToDateWhen { false }
}

task(runCsv, type: JavaExec) {
    if (project.hasProperty('params')) {
        def paramsList = params.split()
        main = 'ec.gob.senescyt.carga.' + paramsList[0]
        classpath = sourceSets.main.runtimeClasspath

        if (paramsList.length == 1) {
            args()
        } else {
            args(paramsList[1..- 1])
        }
    } else if (gradle.startParameter.taskNames[0] == 'runCsv') {
        final CONVERSORES = ['institucion.InstitucionCsv', 'cine.ClasificacionCsv', 'cine.AreaCsv', 'cine.SubareaCsv', 'pais.PaisCsv', 'dpa.ProvinciaCsv', 'dpa.CantonCsv']
        def error = ''
        error += 'Uso correcto: ./gradlew runCsv -P params="paquete.Clase ruta-entrada.csv [ruta-salida.sql]"\n'
        error += 'Conversores disponibles:\n'

        for (item in CONVERSORES) {
            error += "  ${item}\n"
        }

        throw new StopExecutionException(error)
    }
}

// Configure the oneJar task
task oneJar(type: OneJar, dependsOn: clean) {
    mainClass = mainClassName
    additionalDir = file('src/main/resources')
}