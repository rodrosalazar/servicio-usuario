import com.fasterxml.jackson.dataformat.yaml.snakeyaml.Yaml

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'flyway'
apply plugin: 'application'
apply plugin: 'gradle-one-jar'
apply plugin: 'pmd'
apply plugin: 'findbugs'
//apply plugin: 'checkstyle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-gradle-plugin:3.0'
        classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.3.2'
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

flyway {
    def yamlConfig = new Yaml().load(new File('servicio-usuario-dev.yml').newReader())
    def dbConfig = yamlConfig.database

    user = dbConfig.user
    password = dbConfig.password
    url = dbConfig.url
}

// Set our project variables
project.ext {
    dropwizardVersion = '0.7.0'
    archivoConfiguracion = 'servicio-usuario-dev.yml'
}
// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

configurations {
    java2wsdl
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile(
            'io.dropwizard:dropwizard-core:' + dropwizardVersion,
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion,
            'io.dropwizard:dropwizard-hibernate:' + dropwizardVersion,
            'io.dropwizard:dropwizard-auth:' + dropwizardVersion,
            'org.slf4j:slf4j-api:1.7.5',
            'org.postgresql:postgresql:9.3-1101-jdbc41',
            'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.4.0',
            'org.flywaydb:flyway-core:3.0',
            'commons-validator:commons-validator:1.4.0',
            'org.apache.commons:commons-email:1.3.3',
            'org.mindrot:jbcrypt:0.3m',
            'commons-codec:commons-codec:1.9'
    )
    testCompile(
            'junit:junit:4.11',
            'org.hamcrest:hamcrest-core:1.3',
            'org.mockito:mockito-all:1.9.5',
            'org.jvnet.mock-javamail:mock-javamail:1.9',
    )
    java2wsdl(
            "org.apache.cxf:cxf-tools-wsdlto-core:2.7.0",
            "org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:2.7.0",
            "org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:2.7.0",
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

// The main class of the application
mainClassName = 'ec.gob.senescyt.UsuarioApplication'

// Configure the run task to start the Dropwizard service
run {
    if (project.hasProperty('ambiente')) {
        if (ambiente.split().size() == 0) {
            error = 'Debe especificar uno de los siguientes ambientes:\ndev: Desarrollo\nqa:Control de Calidad\nci:Integracion Continua\nEjemplo:./gradlew run -P ambiente=dev'

            throw new StopExecutionException(error)
        }

        def ambienteParaLevantar = ambiente.split()[0]

        if (ambienteParaLevantar == 'dev') {
            ext.archivoConfiguracion = 'servicio-usuario-dev.yml'
        } else if (ambienteParaLevantar == 'qa') {
            ext.archivoConfiguracion = 'servicio-usuario-qa.yml'
        } else if (ambienteParaLevantar == 'ci') {
            ext.archivoConfiguracion = 'servicio-usuario-ci.yml'
        }
    }

    args 'server', archivoConfiguracion
}

test {
    dependsOn pmdMain, pmdTest, findbugsMain, findbugsTest
    exclude 'ec/gob/senescyt/contracts/**'
}

task contractTests(type: Test, dependsOn: testClasses) {
    include 'ec/gob/senescyt/contracts/**'
}

task unitTests(type: Test, dependsOn: testClasses) {
    exclude 'ec/gob/senescyt/contracts/**'
    exclude 'ec/gob/senescyt/integration/**'
}

task integrationTests(type: Test, dependsOn: testClasses) {
    include 'ec/gob/senescyt/integration/**'
}

tasks.withType(Test) {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging {
        showStandardStreams = true
        displayGranularity = 2
        exceptionFormat = 'full'
        events 'started', 'passed'
    }

    outputs.upToDateWhen { false }
}

task(runCsv, type: JavaExec) {
    if (project.hasProperty('params')) {
        def paramsList = params.split()
        main = 'ec.gob.senescyt.carga.' + paramsList[0]
        classpath = sourceSets.main.runtimeClasspath

        if (paramsList.length == 1) {
            args()
        } else {
            args(paramsList[1..-1])
        }
    } else if (gradle.startParameter.taskNames[0] == 'runCsv') {
        final CONVERSORES = ['institucion.InstitucionCsv', 'cine.ClasificacionCsv', 'cine.AreaCsv', 'cine.SubareaCsv',
                             'pais.PaisCsv', 'dpa.ProvinciaCsv', 'dpa.CantonCsv', 'dpa.ParroquiaCsv', 'visa.TipoVisaCsv',
                             'visa.CategoriaVisaCsv', 'arboles.NivelArbolCsv'
        ]
        def error = ''
        error += 'Uso correcto: ./gradlew runCsv -P params="paquete.Clase ruta-entrada.csv [ruta-salida.sql]"\n'
        error += 'Conversores disponibles:\n'

        for (item in CONVERSORES) {
            error += "  ${item}\n"
        }

        throw new StopExecutionException(error)
    }
}

// Configure the oneJar task
task oneJar(type: OneJar, dependsOn: clean) {
    mainClass = mainClassName
    additionalDir = file('src/main/resources')
}

task generateJavaFromWsdl() {
    def wsdlDir = file('src/main/resources/wsdl')
    def wsdlsToGenerate = [['https://www.bsg.gob.ec/sw/STI/BSGSW08_Acceder_BSG?wsdl'],
                           ['https://www.bsg.gob.ec/sw/RC/BSGSW01_Consultar_Cedula?wsdl']]
    def generatedWsdlDir = file("${buildDir}/generated-sources")

    if (!wsdlDir.listFiles()) {
        throw new StopExecutionException("Archivos wsdl no encontrados")
    } else {
        inputs.files wsdlDir.listFiles()
        outputs.files generatedWsdlDir
        doLast {
            wsdlsToGenerate.each { argsin ->
                argsin.add(argsin.size - 1, '-d')
                argsin.add(argsin.size - 1, generatedWsdlDir)
                javaexec {
                    classpath configurations.java2wsdl
                    main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
                    args = argsin
                    systemProperties = ['exitOnFinish': 'TRUE']
                }
            }
        }
    }
}

pmd {
    ruleSets = [
            'basic',
            'braces',
            'clone',
            'codesize',
            'coupling',
            'imports',
            'logging-java',
            'migrating',
            'strictexception',
            'strings',
            'typeresolution',
            'unusedcode',
    ]
    ruleSetFiles = files('config/pmd/pmd.xml')
    targetJdk = '1.7'
}

findbugs {
    toolVersion = '3.0.0'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

/*
checkstyle {
    toolVersion = '5.7'
}

task checkstyleReport << {
    if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(in: "$buildDir/reports/checkstyle/${checkType}.xml",
                style:"config/checkstyle/checkstyle.xsl",
                out:"$buildDir/reports/checkstyle/checkstyle_${checkType}.html"
        )
    }
}

gradle.taskGraph.afterTask {Task task, TaskState state ->
    if(state.failure) {
        if (task.name in ['checkstyleMain', 'checkstyleTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyle(.*)$/
                if (matcher.matches()) {
                    checkType = matcher.group(1).toLowerCase()
                }
            }
            checkstyleReport.execute()
        }
    }
}
*/

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    dependsOn += generateJavaFromWsdl
    source generateJavaFromWsdl.outputs.files, sourceSets.main.java
}